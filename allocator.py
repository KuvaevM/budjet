from threading import Thread

from config import Token
import telebot
from db_reqests import *
import os
import sys
import vk_api
import configparser
from time import sleep
import logging
import matplotlib.pyplot as plt

bot = telebot.TeleBot(Token)

config_path = os.path.join(sys.path[0], 'settings.ini')
config = configparser.ConfigParser()
config.read(config_path)
ACCESS_TOKEN_VK = config.get('VK', 'ACCESS_TOKEN_VK')
COUNT_MAIN = 1
PHOTO_PATH = 'Diagram.jpg'

message_breakers = [':', ' ', '\n']
labels = ["food", "taxes", "fun", "education", "utilities"]
max_message_length = 4091

logging.basicConfig(filename="inform.log", level=logging.INFO)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "/statistic üíØ –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –í—ã —Ç—Ä–∞—Ç–∏–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö\n"
                                      "/registration üõÇ  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—É (–§–ò, –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å)\n"
                                      "/profile üë¶ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                      "/income –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏–±—ã–ª—å ‚úÖ\n"
                                      "/expenses –£–∫–∞–∑–∞—Ç—å —É–±—ã—Ç–∫–∏ üìù\n"
                                      "/info VK - —É–∑–Ω–∞—Ç—å —Å–≤–µ–∂—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                                      "/help üÜò –£–∑–Ω–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n"
                                      "/start üîô –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                                      "/vk_management –ü–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –≥—Ä—É–ø–ø –≤–∫\n"
                                      "/my_groups –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫")


def create_main_markup():
    markup = telebot.types.ReplyKeyboardMarkup(True, True)
    button_statistic = telebot.types.KeyboardButton('üíØ')  # üíØ /statistic
    button_registration = telebot.types.KeyboardButton('üõÇ')  # üõÇ /registration
    button_profile = telebot.types.KeyboardButton('üë¶')  # üë¶ /profile
    button_start = telebot.types.KeyboardButton('üîô')  # üîô /start
    button_income = telebot.types.KeyboardButton('‚úÖ')  # ‚úÖ /income
    button_expenses = telebot.types.KeyboardButton('üìù')  # üìù /start
    button_vk_manage = telebot.types.KeyboardButton('+/-')  # üîô /add or delete vk groups
    button_groups = telebot.types.KeyboardButton('–ì—Ä—É–ø–ø—ã')  # üîô /all user groups
    button_vk = telebot.types.KeyboardButton('VK')  # vk /info
    button_help = telebot.types.KeyboardButton('üÜò')  # üÜò /help
    markup.row(button_registration, button_income, button_expenses)
    markup.row(button_profile, button_statistic, button_help)
    markup.row(button_vk, button_vk_manage, button_groups)
    markup.row(button_start)
    return markup


# –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start(message):
    markup = create_main_markup()
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n'
                                      '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã!\n'
                                      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', reply_markup=markup)

    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAJc8V-2w6lq33eMxp9tbsA2ZtBHpH8gAAJ0AAM7YCQUs8te1W3kR_QeBA')


def main_keyboard(message):
    markup = create_main_markup()
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAKJIF_eek6G_jdz5w8l_XqpXB85SQ74AAIeAAPANk8ToWBbLasAAd4EHgQ',
                     reply_markup=markup)


@bot.message_handler(commands=['income'])
def get_sum(message):
    next_message = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –Ω–∞–º –¥–æ–±–∞–≤–∏—Ç—å –∫ –í–∞—à–∏–º –Ω–∞–ª–∏—á–Ω—ã–º?')
    bot.register_next_step_handler(next_message, add_money)


def add_money(message):
    amount = message.text
    if not amount.isdigit():
        next_message = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(next_message, add_money)
        return
    amount = int(amount)
    if amount < 0:
        next_message = bot.send_message(message.chat.id, '–ù–µ–ª—å–∑—è –∏–º–µ—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '
                                                         '—á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 0')
        bot.register_next_step_handler(next_message, add_money)
        return
    is_existed, profile = get_profile(message.chat.id)
    if not is_existed:
        bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
                                          ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')
        return
    new_amount = profile[0][1] + amount
    change_data_in_profile(message.chat.id, 'amount', new_amount)
    bot.send_message(message.chat.id, f'''–í–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_amount}.''')


@bot.message_handler(commands=['expenses'])
def show_expenses(message):
    chat_id = message.chat.id
    exist, profile = get_profile(chat_id)
    if exist:
        markup = make_buttons()
        next_message = bot.send_message(message.chat.id,
                                        f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –í–∞—à–∏—Ö —Ç—Ä–∞—Ç.""",
                                        reply_markup=markup)
        bot.register_next_step_handler(next_message, choose_type)

    else:
        bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
                                          ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')


data_type = ''


def choose_type(message):
    if message.text in ['food', 'taxes', 'fun', 'education', 'utilities']:
        next_message = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ç—Ä–∞—Ç—ã!')
        global data_type
        data_type = message.text
        bot.register_next_step_handler(next_message, add_expenses)
        return
    if 'exit' in message.text:
        main_keyboard(message)
        return


def make_buttons():
    markup = telebot.types.ReplyKeyboardMarkup(True, True)
    button_food = telebot.types.KeyboardButton('food')
    button_taxes = telebot.types.KeyboardButton('taxes')
    button_fun = telebot.types.KeyboardButton('fun')
    button_education = telebot.types.KeyboardButton('education')
    button_utilities = telebot.types.KeyboardButton('utilities')
    button_exit = telebot.types.KeyboardButton('exit')
    markup.row(button_food, button_taxes, button_fun, button_education, button_utilities, button_exit)
    return markup


def add_expenses(message):
    global data_type
    if 'exit' in data_type:
        main_keyboard(message)
        return

    expense = message.text
    if not expense.isdigit():
        next_message = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ!')
        bot.register_next_step_handler(next_message, add_expenses)
        return
    expense = int(expense)
    chat_id = message.chat.id
    exist, profile = get_profile(chat_id)
    current_sum = profile[0][1]
    if current_sum < expense:
        next_message = bot.send_message(message.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º –∏–º–µ–µ—Ç–µ!')
        bot.register_next_step_handler(next_message, add_expenses)
        return

    change_data_in_profile(chat_id, 'amount', current_sum - expense)
    change_data_in_costs(chat_id, data_type, expense)

    markup = make_buttons()

    next_message = bot.send_message(message.chat.id, "–ï—Å–ª–∏ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ exit.\n–ò–Ω–∞—á–µ, "
                                                     "–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=markup)
    bot.register_next_step_handler(next_message, choose_type)


@bot.message_handler(commands=['statistic'])
def give_statistic(message):
    is_exist, expenses = get_all_expenses(message.chat.id)
    exist, profile = get_profile(message.chat.id)
    if not is_exist:
        bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
                                          ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')
    else:
        expenses = expenses[0]
        fig, ax = plt.subplots()
        ax.pie(expenses, labels=labels, autopct='%1.1f%%', shadow=True,
               wedgeprops={'lw': 1, 'ls': '--', 'edgecolor': "k"}, rotatelabels=True)
        ax.axis("equal")
        plt.savefig(PHOTO_PATH)
        bot.send_message(message.chat.id, '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –í–∞—à–∏ —Ç—Ä–∞—Ç—ã –±—ã–ª–∏ —Å–µ–¥—É—é—â–∏–º–∏')
        bot.send_photo(message.chat.id, open(PHOTO_PATH, 'rb'))
        bot.send_message(message.chat.id, f'''–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: {profile[0][1]}''')


@bot.message_handler(commands=['registration'])
def registration(message):
    is_existed, profile = get_profile(message.chat.id)
    if is_existed:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        return

    next_message = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ—á–∫–∞—Ö 
    –ò–º—è
    –°—É–º–º—É, –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ
    """)
    bot.register_next_step_handler(next_message, registration_add_in_bd)


def exception_registration_add_in_bd(message):
    next_message = bot.send_message(message.chat.id, """
        –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        –ò–º—è
        –°—É–º–º—É, –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ
        """)
    bot.register_next_step_handler(next_message, registration_add_in_bd)
    return


def registration_add_in_bd(message):
    list_name_room = message.text.split('\n')
    if len(list_name_room) != 2:
        exception_registration_add_in_bd(message)
        return

    name = list_name_room[0]  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å
    if not list_name_room[1].isdigit():
        exception_registration_add_in_bd(message)
        return

    amount = int(list_name_room[1])
    chat_id = message.chat.id
    add_users(name=name, amount=amount, chat_id=chat_id)
    add_default_groups(message.chat.id)
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É')


def add_default_groups(chat_id):
    add_group(chat_id, 24864761, '–ë–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä –í–®–≠')
    last_post_id = get_data(COUNT_MAIN, 24864761)['items'][0]['id']
    add_new_post(24864761, int(last_post_id))
    add_group(chat_id, 47706515, '–°—Ç–∞—Ä—Ç–∞–ø | –ò–¥–µ–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥')
    last_post_id = get_data(COUNT_MAIN, 47706515)['items'][0]['id']
    add_new_post(47706515, int(last_post_id))


@bot.message_handler(commands=['profile'])
def show_profile(message):
    chat_id = message.chat.id
    exist, profile = get_profile(chat_id)
    if exist:
        profile = profile[0]
        amount = profile[1]
        name = profile[0]

        markup = telebot.types.ReplyKeyboardMarkup(True, True)
        button_name = telebot.types.KeyboardButton('name')
        button_amount = telebot.types.KeyboardButton('amount')
        button_exit = telebot.types.KeyboardButton('exit')
        markup.row(button_name, button_amount, button_exit)

        next_message = bot.send_message(message.chat.id,
                                        f""" Name: {name}\nAmount: {amount}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ""",
                                        reply_markup=markup)
        bot.register_next_step_handler(next_message, change_profile)

    else:
        bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
                                          ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')


def change_profile(message):
    if message.text in ['name', 'amount']:
        next_message = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
        global data_type
        data_type = message.text
        bot.register_next_step_handler(next_message, change_data_in_profile_bot)
        return
    if 'exit' in message.text:
        main_keyboard(message)
        return


def change_data_in_profile_bot(message):
    global data_type
    if 'exit' in data_type:
        main_keyboard(message)
        return

    change_data_in_profile(message.chat.id, data_type, message.text)

    markup = telebot.types.ReplyKeyboardMarkup(True, True)
    button_name = telebot.types.KeyboardButton('name')
    button_amount = telebot.types.KeyboardButton('amount')
    button_exit = telebot.types.KeyboardButton('exit')
    markup.row(button_name, button_amount, button_exit)

    next_message = bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –º–µ–Ω—è—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ exit.\n–ò–Ω–∞—á–µ, "
                                                     "–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=markup)
    bot.register_next_step_handler(next_message, change_profile)


def start_vk_session():
    vk_session = vk_api.VkApi(token=ACCESS_TOKEN_VK)
    vk = vk_session.get_api()
    return vk


def get_data(count_vk, group_id):
    vk = start_vk_session()
    response = []
    try:
        response = vk.wall.get(owner_id='-' + str(group_id), count=count_vk)
    except vk_api.ApiError:
        logging.warning('–ó–∞–∫—Ä—ã—Ç—Ç–∞—è –≥—Ä—É–ø–ø–∞')

    return response


def send_posts_vk_with_button(message_chat_id, group_id: int = None):
    posts = get_data(COUNT_MAIN, group_id=group_id)
    if posts:
        posts = posts['items']
        for post in posts:
            text = post['text']
            send_posts_text(text, message_chat_id)
            send_attachments(message_chat_id, post)
    else:
        bot.send_message(message_chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞—è. –ú—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å '
                                          '–í–∞–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π.')


def send_posts_vk_continuously():
    message_chat_ids = get_all_chat_ids()
    for chat_id in message_chat_ids:
        groups = get_persons_groups(chat_id)
        for group in groups:
            group_id = group[0]
            group_name = group[1]
            post = get_data(COUNT_MAIN, group_id=group_id)
            if post:
                post = post['items'][0]
                last_post_id = get_last_post_id(group_id)
                if not last_post_id:
                    logging.warning('User choose empty groop')
                elif int(post['id']) > last_post_id:
                    text = post['text']
                    send_posts_text(text, chat_id, group_name)
                    send_attachments(chat_id, post)
    groups = get_all_groups()
    for group in groups:
        group_id = group[0]
        post_id = group[1]
        post_id_last = get_data(COUNT_MAIN, group_id)
        if post_id_last:
            post_id_last = post_id_last['items'][0]['id']
            if post_id != int(post_id_last):
                update_last_post_id(group_id, post_id_last)


def send_posts_text(text, message_chat_id, group_name: str = None):
    if text != '':
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        for message in split_text(text):
            try:
                if group_name:
                    bot.send_message(message_chat_id, f'–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}:')
                bot.send_message(message_chat_id, message, disable_web_page_preview=True)
            except telebot.apihelper.ApiException as e:
                logging.warning(e)
                break


def split_text(text):
    if len(text) >= max_message_length:
        last_index = max(
            map(lambda separator: text.rfind(separator, 0, max_message_length), message_breakers))
        good_part = text[:last_index]
        bad_part = text[last_index + 1:]
        return [good_part] + split_text(bad_part)
    else:
        return [text]


def send_attachments(message_chat_id, post):
    images = []
    if 'attachments' in post:
        attachment = post['attachments']
        for add in attachment:
            if add['type'] == 'photo':
                image = add['photo']
                images.append(image)
    if len(images) > 0:
        image_urls = list(map(lambda image: max(
            image["sizes"], key=lambda size: size["type"])["url"], images))
        try:
            bot.send_media_group(message_chat_id, list(map(
                lambda url: telebot.types.InputMediaPhoto(url), image_urls)))
        except telebot.apihelper.ApiException as e:
            logging.warning(e)


@bot.message_handler(commands=['vk_management'])
def get_operation(message):
    markup = telebot.types.ReplyKeyboardMarkup(True, True)
    button_add = telebot.types.KeyboardButton('add')
    button_delete = telebot.types.KeyboardButton('delete')
    button_exit = telebot.types.KeyboardButton('exit')
    markup.row(button_add, button_delete, button_exit)
    next_message = bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É:\nadd ID '
                                                     '–≥—Ä—É–ø–ø—ã/–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n '
                                                     '–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É:\ndelete ID –≥—Ä—É–ø–ø—ã/–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\nexit - –≤—ã—Ö–æ–¥ '
                                                     '–Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    bot.register_next_step_handler(next_message, vk_setting)


def vk_setting(message):
    vk_operation = message.text
    if vk_operation == 'exit':
        main_keyboard(message)
        return
    is_existed_in_bd, profile = get_profile(message.chat.id)
    if not is_existed_in_bd:
        bot.send_message(message.chat.id,
                         '–ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—ã –≤–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!')
        return
    if vk_operation == 'add':
        next_message = bot.send_message(message.chat.id,
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ '
                                        '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
        bot.register_next_step_handler(next_message, vk_add)
        return
    if vk_operation == 'delete':
        next_message = bot.send_message(message.chat.id,
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è')
        bot.register_next_step_handler(next_message, vk_delete)
        return
    next_message = bot.send_message(message.chat.id,
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!')
    bot.register_next_step_handler(next_message, vk_setting)
    return


def vk_add(message):
    vk_id = message.text
    vk = start_vk_session()
    name_of_group = ''
    id_of_group = 0
    try:
        name_of_group = vk.groups.getById(group_id=vk_id)[0]['name']
        id_of_group = int(vk.groups.getById(group_id=vk_id)[0]['id'])
    except vk_api.ApiError:
        logging.warning('Wrong VK group name')
    if name_of_group == '':
        next_message = bot.send_message(message.chat.id,
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã!')
        bot.register_next_step_handler(next_message, vk_add)
        return
    is_existed, group_name = is_persons_group(message.chat.id, group_id=id_of_group)
    if is_existed:
        bot.send_message(message.chat.id,
                         f'–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É {group_name}!')
        get_operation(message)
        return
    else:
        add_group(message.chat.id, id_of_group, name_of_group)
        is_already_existed = is_new_group(id_of_group)
        if is_already_existed:
            last_post_id = get_data(COUNT_MAIN, id_of_group)
            if last_post_id:
                last_post_id = last_post_id['items'][0]['id']
                add_new_post(id_of_group, int(last_post_id))
            else:
                bot.send_message(message.chat.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É. –ú—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º '
                                                  '–Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π')
        bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É {name_of_group}')
        get_operation(message)
        return


def vk_delete(message):
    vk_operation = message.text
    if vk_operation.isdigit():
        is_existed, group_name = is_persons_group(message.chat.id, group_id=int(vk_operation))
        if not is_existed:
            bot.send_message(message.chat.id,
                             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É')
            get_operation(message)
            return
        else:
            delete_group(message.chat.id, group_id=vk_operation)
            bot.send_message(message.chat.id,
                             f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã {group_name}')
            get_operation(message)
    else:
        is_existed, group_name = is_persons_group(message.chat.id, group_name=vk_operation)
        if not is_existed:
            bot.send_message(message.chat.id,
                             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É')
            get_operation(message)
            return
        else:
            delete_group(message.chat.id, group_name=group_name)
            bot.send_message(message.chat.id,
                             f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã {group_name}')
            get_operation(message)


@bot.message_handler(commands=['my_groups'])
def persons_groups(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω"""
    list_of_groups = get_persons_groups(message.chat.id)
    text_of_message = ''
    for name_of_group in list_of_groups:
        text_of_message = text_of_message + name_of_group[1] + '\n'
    if text_of_message == '':
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ —á—Ç–æ')
    else:
        bot.send_message(message.chat.id, text_of_message)


@bot.message_handler(commands=['info'])
def get_info(message):
    markup = telebot.types.InlineKeyboardMarkup()
    list_of_groups = get_persons_groups(message.chat.id)
    for group in list_of_groups:
        markup.add(telebot.types.InlineKeyboardButton(text=group[1], callback_data=str(group[0])))
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', reply_markup=markup)


# Inline keyboard
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    list_of_groups = get_persons_groups(call.message.chat.id)
    for group in list_of_groups:
        if call.data == str(group[0]):
            send_posts_vk_with_button(message_chat_id=call.message.chat.id, group_id=group[0])


def bot_telegram_polling():
    while True:
        try:
            global bot
            bot.polling(none_stop=True)
        except Exception as exception:
            logging.warning(exception)


def vk_post():
    while True:
        send_posts_vk_continuously()
        sleep(10)


@bot.message_handler(content_types=['text'])
def allocation_commands(message):
    if message.text == 'üíØ':
        give_statistic(message)
    elif message.text == '‚úÖ':
        get_sum(message)
    elif message.text == 'üõÇ':
        registration(message)
    elif message.text == 'üë¶':
        show_profile(message)
    elif message.text == 'üìù':
        show_expenses(message)
    elif message.text == 'üîô':
        start(message)
    elif message.text == 'VK':
        get_info(message)
    elif message.text == 'üÜò':
        help(message)
    elif message.text == '+/-':
        get_operation(message)
    elif message.text == '–ì—Ä—É–ø–ø—ã':
        persons_groups(message)


if __name__ == '__main__':
    Thread(target=bot_telegram_polling).start()
    Thread(target=vk_post).start()
